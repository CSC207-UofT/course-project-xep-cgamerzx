package com.xepicgamerzx.hotelier.storage;


import android.app.Application;

import androidx.annotation.NonNull;

import com.xepicgamerzx.hotelier.objects.Hotel;
import com.xepicgamerzx.hotelier.objects.HotelRoom;
import com.xepicgamerzx.hotelier.objects.RoomAmenitiesCrossRef;
import com.xepicgamerzx.hotelier.objects.RoomAmenity;
import com.xepicgamerzx.hotelier.storage.dao.RoomAmenitiesCrossDao;
import com.xepicgamerzx.hotelier.storage.dao.RoomDao;

import java.math.BigDecimal;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class RoomManager implements DiscreteManager<HotelRoom, Long, Long[]> {
    private static volatile RoomManager INSTANCE;

    private final HotelierDatabase db;
    private final RoomDao roomDao;
    private final RoomAmenitiesCrossDao roomAmenitiesCrossDao;

    private RoomManager(Application application) {
        db = HotelierDatabase.getDatabase(application);
        roomDao = db.roomDao();
        roomAmenitiesCrossDao = db.roomAmenitiesCrossDao();
    }

    private RoomManager(HotelierDatabase dbInstance) {
        db = dbInstance;
        roomDao = db.roomDao();
        roomAmenitiesCrossDao = db.roomAmenitiesCrossDao();
    }

    public static RoomManager getManager(Application application) {
        if (INSTANCE == null) {
            INSTANCE = new RoomManager(application);
        }

        return INSTANCE;
    }

    public static RoomManager getManager(HotelierDatabase dbInstance) {
        if (INSTANCE == null) {
            INSTANCE = new RoomManager(dbInstance);
        }

        return INSTANCE;
    }

    /**
     * Creates HotelRoom object and inserts it to the HotelRoom database.
     *
     * @param zoneId    TimeZone of HotelRoom.
     * @param startDate Start date of availability period for the room.
     * @param endDate   End date of availability period for the room.
     * @param capacity  Occupancy capacity of the hotel room.
     * @param price     Price of the HotelRoom created.
     * @return HotelRoom object created.
     */
    @NonNull
    public HotelRoom createRoom(ZoneId zoneId, long startDate, long endDate, int capacity, BigDecimal price) {
        HotelRoom hotelRoom = new HotelRoom(
                zoneId, startDate, endDate,
                capacity,
                price);

        Long[] ids = insert(hotelRoom);
        hotelRoom = get(ids).get(0);

        return hotelRoom;
    }

    /**
     * Inserts the HotelRoom(s) to the HotelRoom database.
     *
     * @param hotelRoom HotelRoom object(s) to be saved.
     * @return Long[], autogenerated RoomID of the HotelRoom(s) saved.
     */
    @Override
    public Long[] insert(HotelRoom... hotelRoom) {
        return roomDao.insert(hotelRoom).toArray(new Long[0]);
    }

    /**
     * Updates Room object(s) in the database.
     *
     * @param room Room object(s) to be updated in the database.
     */
    @Override
    public void update(HotelRoom... room) {
        roomDao.update(room);
    }

    /**
     * Sets the hotelRoom's hotel association ID to the ID of hotel.
     *
     * @param hotel     Hotel the hotel room is to be associated with.
     * @param hotelRoom HotelRoom to change the hotelID of.
     */
    public void setHotelID(Hotel hotel, HotelRoom hotelRoom) {
        hotelRoom.setHotelID(hotel.hotelID);
        update(hotelRoom);
    }

    @Override
    public List<HotelRoom> get(Long... hotelRoomID) {
        return roomDao.getRooms(hotelRoomID);
    }

    @Override
    public List<HotelRoom> getAll() {
        return roomDao.getAllRooms();
    }

    public List<HotelRoom> getRoomsInHotelByDate(Hotel hotel, long userStartAvail, long userEndAvail) {
        List<HotelRoom> hotelRooms = roomDao.getRoomsInHotel(hotel.hotelID);
        List<HotelRoom> filteredRooms = new ArrayList<>();

        for (HotelRoom hotelRoom : hotelRooms) {
            long roomStartAvail = hotelRoom.getStartAvailability();
            long roomEndAvail = hotelRoom.getEndAvailability();

            if (userStartAvail >= roomStartAvail && userEndAvail <= roomEndAvail) {
                filteredRooms.add(hotelRoom);
            }
        }

        return filteredRooms;
    }

    public List<HotelRoom> getHotelRoomsInHotel(long hotelID) {
        return roomDao.getRoomsInHotel(hotelID);
    }

    public int getNumberOfRooms(long hotelID) {
        return getHotelRoomsInHotel(hotelID).size();
    }

    public int getNumberOfRooms(Hotel hotel) {
        return getNumberOfRooms(hotel.hotelID);
    }

    /**
     * Returns the min and max price of all the hotel rooms given.
     *
     * @param hotelRooms list of HotelRooms to compare between.
     * @return List<BigDecimal> min and max price of all the hotel rooms.
     */
    public List<BigDecimal> getPriceRange(List<HotelRoom> hotelRooms) {
        HotelRoom minPricedRoom = hotelRooms.stream()
                .min(Comparator.comparing(HotelRoom::getPrice))
                .get();

        HotelRoom maxPricedRoom = hotelRooms.stream()
                .max(Comparator.comparing(HotelRoom::getPrice))
                .get();

        return Arrays.asList(minPricedRoom.getPrice(), maxPricedRoom.getPrice());
    }

    /**
     * Returns the min and max price of all the hotel rooms associated with the given Hotel.
     *
     * @param hotel Hotel that rooms compared are associated with.
     * @return List<BigDecimal> min and max price of all the hotel rooms associated with the Hotel.
     */
    public List<BigDecimal> getPriceRange(Hotel hotel) {
        List<HotelRoom> hotelRooms = getHotelRoomsInHotel(hotel.hotelID);
        return getPriceRange(hotelRooms);
    }

    /**
     * Returns the min and max price of all the hotel rooms associated with the given Hotel.
     *
     * @param hotelID Long ID of the hotel that rooms compared are associated with.
     * @return List<BigDecimal> min and max price of all the hotel rooms associated with the Hotel.
     */
    public List<BigDecimal> getPriceRange(long hotelID) {
        List<HotelRoom> hotelRooms = getHotelRoomsInHotel(hotelID);
        return getPriceRange(hotelRooms);
    }

    /**
     * Closes the database if already open.
     */
    @Override
    public void close() {
        INSTANCE = null;
    }
}